@page "/todolist"
@using Schiavello.Model
@using Schiavello.Contracts.Repositories
@inject HttpClient Http
@inject IToDoListRepository ToDoListRepository

<PageTitle>To Do List</PageTitle>

@if (_todo == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div style="width: 50%; height: 50%; display: flex;">
        <button class="btn btn-info" style="width: 10%; margin-right: 1%; border-radius: 15px;" @onclick="GetActiveTasks">Tasks</button>
        <button class="btn btn-primary" style="border-radius: 15px; margin-right: 1%;" @onclick="GetCompletedTasks">Tasks Done</button>
        <button class="btn btn-danger" style="border-radius: 15px" @onclick="GetDeletedTasks">Tasks Deleted</button>
    </div>

    <div style="width: 50%; height: 50%; display: flex; flex-direction: column; margin-top: 3%">

        @foreach (var element in _todo)
        {
            <div style="display: flex; width: 100%; padding: 3%; border-radius: 3px; border: solid 2px gray;  margin-top: 1%">
                <label style="display: flex; width: 80%; align-items: center;">
                    @if (@element.Status == "Active")
                    {
                        <input @key="element" type="checkbox" style="margin-right: 1%" @onclick="@(() => FinishTask(@element.Id, @element.Description))">
                    }
                    @if (!@element.IsEdit)
                    {
                        <label>@element.Description</label>
                    }
                    else
                    {
                        <input type="text" value="@element.Description" style="padding-right: 60%;" @onchange="@((ChangeEventArgs _) => @element.Description = _?.Value?.ToString())"/>
                    }
                </label>
                @if (@element.Status == "Active")
                {
                    <div style="width: 20%">
                        <button class="btn btn-info" @onclick="@(() => UpdateTask(@element.Id, @element.Description, @element.ButtonText))">
                            @element.ButtonText
                        </button>
                        <button class="btn btn-danger" @onclick="@(() => UpdateTask(@element.Id, @element.Description, "Delete"))">Delete</button>
                    </div>
                }
            </div>
        }
        <div style="display: flex; width: 100%; margin-top: 5%">
            <input type="text" style="border-radius: 3px; border: solid 1px black; padding: 7px; width: 50%; margin-right: 3px;" value="@_description" @onchange="@((ChangeEventArgs _) => _description = _?.Value?.ToString())"/>
            <button class="btn btn-primary" style="border-radius: 3px; width: 10%; padding: 7px;" @onclick="CreateUpcomingTodo">Add</button>
        </div>
    </div>
}

<style>
</style>

@code {
    private IEnumerable<Todo> _todo;
    private bool _shouldRender = true;
    private string _description { get; set; }

    protected override Task OnInitializedAsync()
    {
        GetTasksByStatus("Active");

        return Task.CompletedTask;
    }

    protected override bool ShouldRender()
	{
		return _shouldRender;
	}

    private async void GetTasksByStatus(string status)
    {
        _todo = await ToDoListRepository.GetAllTodo(status);
        StateHasChanged();
    }

    private async void CreateUpcomingTodo()
    {
        var status = "Active";
        await ToDoListRepository.CreateTodo(_description, status);
        GetTasksByStatus("Active");
        _description = "";
    }

    private async void GetActiveTasks()
    {
        GetTasksByStatus("Active");
    }

    private async void GetCompletedTasks()
    {
        GetTasksByStatus("Done");
    }

    private async void GetDeletedTasks()
    {
        GetTasksByStatus("Deleted");
    }

    private async void UpdateTask(int id, string description, string buttonText)
    {
        UpdateCheckbox(id);

        //For editing the task
        if (buttonText == "Apply")
        {
            await ToDoListRepository.UpdateTodo(id, description, "Active");
            GetTasksByStatus("Active");
        }
        else if (buttonText == "Delete")
        {
            //Delete if delete button is clicked
            await ToDoListRepository.UpdateTodo(id, description, "Deleted");
            GetTasksByStatus("Active");
        }
    }

    private async void FinishTask(int id, string description)
    {
        await ToDoListRepository.UpdateTodo(id, description, "Done");
        GetTasksByStatus("Active");
    }
    
    //Updating checkbox to avoid rendering issue
    private void UpdateCheckbox(int id)
    {
        foreach (var item in _todo.Where(_ => _.Id == id))
        {
            item.IsEdit = true;
            item.ButtonText = "Apply";
        }
        StateHasChanged();
    }

}